version: 4.0.0-{branch}-ci-{build}

branches:
  only:
  - master
  - /v\d*\.\d*\.\d*/

# do not build feature branches with open pull requests
skip_branch_with_pr: true

#shallow clone does not work when submodules are involved!
#shallow_clone: true

matrix:
  fast_finish: true # set this flag to immediately finish build once one of the jobs fails.

environment:
  GH_AUTH_TOKEN:
    secure: 850frgRGZcc4Cljd2P7Ej68no4/kkl4EMB+DjnX725wcKBRJuFk/kGRdJGyKXd2u
  matrix:
    - APPVEYOR_BUILD_WORKER_IMAGE: macos-mojave
      CMAKE_GENERATOR: 'Unix Makefiles'
      CMAKE_PLATFORM: x64
      COMPILER_ID: gcc

    - APPVEYOR_BUILD_WORKER_IMAGE: macos
      CMAKE_GENERATOR: 'Unix Makefiles'
      CMAKE_PLATFORM: x64
      COMPILER_ID: gcc

#    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
#      CMAKE_GENERATOR: 'Unix Makefiles'
#      CMAKE_PLATFORM: x86
#      CMAKE_ARCH_FLAGS: -m32
#      COMPILER_ID: gcc
#
#    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
#      CMAKE_GENERATOR: 'Unix Makefiles'
#      CMAKE_PLATFORM: x64
#      CMAKE_ARCH_FLAGS: -m64
#      COMPILER_ID: gcc
#
# older compilers are supported in a separate appveyor project
#
#    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
#      BOOST_VERSION: 1_69_0
#      CMAKE_GENERATOR: 'Visual Studio 10 2010'
#      CMAKE_ARCHITECTURE: Win32
#      CMAKE_PLATFORM: x86
#      COMPILER_ID: msvc10
#
#    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
#      BOOST_VERSION: 1_69_0
#      CMAKE_GENERATOR: 'Visual Studio 10 2010'
#      CMAKE_ARCHITECTURE: x64
#      CMAKE_PLATFORM: x64
#      COMPILER_ID: msvc10
#
#    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
#      BOOST_VERSION: 1_69_0
#      CMAKE_GENERATOR: 'Visual Studio 14 2015'
#      CMAKE_ARCHITECTURE: Win32
#      CMAKE_PLATFORM: x86
#      COMPILER_ID: msvc14
#
#    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
#      BOOST_VERSION: 1_69_0
#      CMAKE_GENERATOR: 'Visual Studio 14 2015'
#      CMAKE_ARCHITECTURE: x64
#      CMAKE_PLATFORM: x64
#      COMPILER_ID: msvc14
#
# newer compilers are supported in a separate appveyor project
#
#    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
#      BOOST_VERSION: 1_69_0
#      CMAKE_GENERATOR: 'Visual Studio 15 2017'
#      CMAKE_ARCHITECTURE: Win32
#      CMAKE_PLATFORM: x86
#      COMPILER_ID: msvc15
#
#    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
#      BOOST_VERSION: 1_69_0
#      CMAKE_GENERATOR: 'Visual Studio 15 2017'
#      CMAKE_ARCHITECTURE: x64
#      CMAKE_PLATFORM: x64
#      COMPILER_ID: msvc15
#
#    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
#      BOOST_VERSION: 1_71_0
#      CMAKE_GENERATOR: 'Visual Studio 16 2019'
#      CMAKE_ARCHITECTURE: Win32
#      CMAKE_PLATFORM: x86
#      COMPILER_ID: msvc16
#
#    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
#      BOOST_VERSION: 1_71_0
#      CMAKE_GENERATOR: 'Visual Studio 16 2019'
#      CMAKE_ARCHITECTURE: x64
#      CMAKE_PLATFORM: x64
#      COMPILER_ID: msvc16
#
#    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
#      CMAKE_GENERATOR: 'MSYS Makefiles'
#      CMAKE_PLATFORM: i686
#      COMPILER_ID: mingw32
#
#    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
#      CMAKE_GENERATOR: 'MSYS Makefiles'
#      CMAKE_PLATFORM: x86_64
#      COMPILER_ID: mingw64

install:
  - sh: |
      brew install jq
      brew install boost
      brew install doxygen
  - git submodule update --init --recursive

# Assumes that we use the vx.y.z tagging scheme (e.g. v1.3.0)
before_build:
  - sh: |
      if [ -z "${APPVEYOR_REPO_TAG_NAME+x}" ]; then export CI_REPO_TAG_NAME=${APPVEYOR_REPO_TAG_NAME:1}; else export CI_REPO_TAG_NAME=latest; fi
      BUILD_SOURCE_ARCHIVE=$APPVEYOR_PROJECT_NAME-$CI_REPO_TAG_NAME-src.tar.gz
      if [ ! -d "$APPVEYOR_BUILD_FOLDER/../$APPVEYOR_PROJECT_NAME" ]; then cp -r $APPVEYOR_BUILD_FOLDER $APPVEYOR_BUILD_FOLDER/../$APPVEYOR_PROJECT_NAME; fi
      cd $APPVEYOR_BUILD_FOLDER/..
      tar -czf $BUILD_SOURCE_ARCHIVE $APPVEYOR_PROJECT_NAME
      mv $BUILD_SOURCE_ARCHIVE $APPVEYOR_BUILD_FOLDER
      cd $APPVEYOR_BUILD_FOLDER
      mkdir $APPVEYOR_BUILD_FOLDER/downloads
      export COMPILER_ID=$APPVEYOR_BUILD_WORKER_IMAGE-$COMPILER_ID`$COMPILER_ID -dumpversion | tr '.' '\n'`
      ###############
      ###if [ -z "${APPVEYOR_REPO_TAG_NAME+x}" ]; then export SUPERGLU_REPO_TAG_NAME=$SUPERGLU_VERSION; else export SUPERGLU_REPO_TAG_NAME=latest; fi
      ###DOWNLOAD_FILE_SUPERGLU=superglu-$SUPERGLU_REPO_TAG_NAME-$COMPILER_ID-$CMAKE_PLATFORM.tar.gz
      ###echo download file $DOWNLOAD_FILE_SUPERGLU
      ###if [ -z "${APPVEYOR_REPO_TAG_NAME+x}" ]; then
      ###  export DOWNLOAD_ADDRESS_SUPERGLU=https://github.com/coin3d/superglu/releases/download/v$SUPERGLU_VERSION/$DOWNLOAD_FILE_SUPERGLU
      ###else
      ###  RELEASE_ID=`curl -s -H "Authorization: token $GH_AUTH_TOKEN" https://api.github.com/repos/coin3d/superglu/releases | jq '.[] | select(.name=="CI builds") | .id'`
      ###  ASSET_ID=`curl -s -H "Authorization: token $GH_AUTH_TOKEN" https://api.github.com/repos/coin3d/superglu/releases/$RELEASE_ID | jq -r --arg DOWNLOAD_FILE_SUPERGLU "$DOWNLOAD_FILE_SUPERGLU" '.assets[] | select(.name==$DOWNLOAD_FILE_SUPERGLU) | .id'`
      ###  export DOWNLOAD_ADDRESS_SUPERGLU=https://api.github.com/repos/coin3d/superglu/releases/assets/$ASSET_ID
      ###fi
      ###echo download address $DOWNLOAD_ADDRESS_SUPERGLU
      ###curl -s -S -L -H "Authorization: token $GH_AUTH_TOKEN" -H "Accept: application/octet-stream" -o $DOWNLOAD_FILE_SUPERGLU $DOWNLOAD_ADDRESS_SUPERGLU
      ###tar -xzf $DOWNLOAD_FILE_SUPERGLU -C $APPVEYOR_BUILD_FOLDER/downloads
      ###############
      export CFLAGS=$CMAKE_ARCH_FLAGS
      export CXXFLAGS=$CMAKE_ARCH_FLAGS
      #cmake -H. -Bbuild_debug   -G "$CMAKE_GENERATOR" -DCMAKE_BUILD_TYPE=Debug   -DCMAKE_POSITION_INDEPENDENT_CODE=true -DCMAKE_INSTALL_PREFIX=$APPVEYOR_BUILD_FOLDER/Coin3D
      cmake -H. -Bbuild_release -G "$CMAKE_GENERATOR" -DCMAKE_BUILD_TYPE=Release -DCMAKE_POSITION_INDEPENDENT_CODE=true -DCMAKE_INSTALL_PREFIX=$APPVEYOR_BUILD_FOLDER/Coin3D

build_script:
  - sh: |
      BUILD_TOOL_OPTIONS=-j4
      #cmake --build build_debug   --target install --config Debug   -- $BUILD_TOOL_OPTIONS
      cmake --build build_release --target install --config Release -- $BUILD_TOOL_OPTIONS

after_build:
  - sh: |
      cd $APPVEYOR_BUILD_FOLDER
      if [ -z "${APPVEYOR_REPO_TAG_NAME+x}" ]; then export CI_REPO_TAG_NAME=${APPVEYOR_REPO_TAG_NAME:1}; else export CI_REPO_TAG_NAME=latest; fi
      BUILD_ARCHIVE=$APPVEYOR_PROJECT_NAME-$CI_REPO_TAG_NAME-$COMPILER_ID-$CMAKE_PLATFORM.tar.gz
      tar -czf $BUILD_ARCHIVE Coin3D/*
      appveyor DownloadFile https://ci.appveyor.com/api/buildjobs/$APPVEYOR_JOB_ID/log -FileName $APPVEYOR_PROJECT_NAME-$CI_REPO_TAG_NAME-$COMPILER_ID-$CMAKE_PLATFORM.log

artifacts:
  - path: $(APPVEYOR_PROJECT_NAME)*.zip
    name: CIArchives
  - path: $(APPVEYOR_PROJECT_NAME)*.tar.gz
    name: CIArchivesTGZ
  - path: $(APPVEYOR_PROJECT_NAME)*.log
    name: logs

test_script:
  - sh: |
      cd build_release
      ctest -C Release -VV

notifications:
  - provider: Email
    to:
      - '{{commitAuthorEmail}}'
#      - coin-support@coin3d.org
    on_build_success: false
    on_build_failure: true
    on_build_status_changed: true

deploy:
  # Deploy to GitHub Releases
  - provider: GitHub
    auth_token:
      secure: 850frgRGZcc4Cljd2P7Ej68no4/kkl4EMB+DjnX725wcKBRJuFk/kGRdJGyKXd2u # your encrypted token from GitHub
    artifact: CIArchives, CIArchivesTGZ, logs
    tag: 'CI builds'
    description: 'Results of CI builds for various platforms'
    draft: false
    prerelease: true
    force_update: true
    on:
      branch: master                # release from master branch only

  # Deploy to GitHub Releases
  - provider: GitHub
    auth_token:
      secure: 850frgRGZcc4Cljd2P7Ej68no4/kkl4EMB+DjnX725wcKBRJuFk/kGRdJGyKXd2u # your encrypted token from GitHub
    artifact: CIArchives, CIArchivesTGZ
    tag: $(APPVEYOR_REPO_TAG_NAME)
    description: 'Release build'
    draft: false
    prerelease: true
    force_update: true
    on:
      appveyor_repo_tag: true       # deploy on tag push only
